!function(){"use strict";const e={inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t={editProfileButton:document.querySelector(".profile__edit-button"),editAvatarButton:document.querySelector(".profile__avatar-edit-button"),addCardButton:document.querySelector(".profile__add-button")};var s=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(e,t){let s=!1;e.forEach((e=>{e.validity.valid||(s=!0)})),s?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}_setEventListeners(){this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState(this._inputElements,this._submitButton)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState(this._inputElements,this._submitButton)}},r=class{constructor(e,t,s,r,i,n){let{name:a,link:o,_id:l,isLiked:d}=e;this._name=a,this._link=o,this._id=l,this._isLiked=d,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLike=i,this._handleDislike=n}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.contains("card__like-button_active")?this._handleDislike(this._id):this._handleLike(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}updateLikeButton(e){this._isLiked=e,this._likeButton.classList.toggle("card__like-button_active",this._isLiked)}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._element.setAttribute("data-id",this._id),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this.updateLikeButton(this._isLiked),this._setEventListeners(),this._element}};class i{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&(e.preventDefault(),this.close())}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&this.close()}))}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}}class n extends i{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputElements=this._popupElement.querySelectorAll(".modal__input"),this._submitButton=this._popupElement.querySelector(".modal__save"),this._submitButtonContent=this._submitButton.textContent}getForm(){return this._popupForm}_getInputValues(){return this._inputValues={},this._inputElements.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setInputValues(e){this._inputElements.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._inputValues=this._getInputValues(),this._handleFormSubmit(this._inputValues),this.close()}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e?(this._submitButton.textContent=t,this._submitButton.disabled=!0):(this._submitButton.textContent=this._submitButtonContent,this._submitButton.disabled=!1)}close(){super.close()}resetForm(){this._popupForm.reset()}}const a=new n({popupSelector:"#edit-profile-modal",handleFormSubmit:e=>{a.setLoading(!0,"Saving..."),u.updateUserProfile(e.userName,e.userDescription).then((e=>{_.setUserInfo({userName:e.name,userDescription:e.about}),a.close()})).catch((e=>console.error("Error updating user profile:",e))).finally((()=>{a.setLoading(!1)}))}}),o=new n({popupSelector:"#update-avatar-modal",handleFormSubmit:e=>{const t=e.link;o.setLoading(!0,"Saving..."),u.updateUserAvatar(t).then((e=>{document.querySelector(".profile__avatar").src=e.avatar,o.close()})).catch((e=>console.error("Error updating profile picture:",e))).finally((()=>{o.setLoading(!1)}))}}),l=new n({popupSelector:"#add-card-modal",handleFormSubmit:e=>{l.setLoading(!0,"Saving..."),u.addNewCard(e).then((e=>{const t=c(e);m.addItem(t,!0),l.close(),l.resetForm()})).catch((e=>console.error("Error adding new card:",e))).finally((()=>{l.setLoading(!1)}))}}),d=new class extends i{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__preview-image"),this._caption=this._popupElement.querySelector(".modal__preview-caption")}open(e){let{link:t,name:s}=e;this._caption.textContent=s,this._image.src=t,this._image.alt=s,super.open()}}("#preview-image-modal"),h=new class extends i{constructor(e,t){super(e),this._handleConfirm=t,this._confirmButton=this._popupElement.querySelector(".modal__save"),this._closeButton=this._popupElement.querySelector(".modal__close-button")}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleConfirm(),this.close()}))}open(e){super.open(),this._handleConfirm=e}}("#delete-card-modal");function c(e){const t=new r(e,"#card-template",(e=>{d.open({link:e.link,name:e.name})}),(e=>{h.open((()=>{u.deleteCard(e).then((()=>{document.querySelector(`.card[data-id="${e}"]`).remove()})).catch((e=>console.error("Error deleting card:",e)))}))}),(e=>{u.likeCard(e).then((e=>{t.updateLikeButton(e.isLiked)})).catch((e=>console.error("Error liking card:",e)))}),(e=>{u.dislikeCard(e).then((e=>{t.updateLikeButton(e.isLiked)})).catch((e=>console.error("Error disliking card:",e)))}));return t.getView()}const u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_handleError(e){return console.error(e),Promise.reject(e)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse).catch(this._handleError)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponse).catch(this._handleError)}updateUserProfile(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then(this._handleResponse).catch(this._handleError)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then(this._handleResponse).catch(this._handleError)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then(this._handleResponse).catch(this._handleError)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}loadUserInfoAndCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3fd446db-e54d-438e-b742-4b3d652cdb08","Content-Type":"application/json"}}),_=new class{constructor(e){let{userNameSelector:t,userDescriptionSelector:s,userAvatarSelector:r}=e;this._userNameElement=document.querySelector(t),this._userDescriptionElement=document.querySelector(s),this._userAvatarElement=document.querySelector(r)}getUserInfo(){return{userName:this._userNameElement.textContent,userDescription:this._userDescriptionElement.textContent,avatar:this._userAvatarElement.src}}setUserInfo(e){let{userName:t,userDescription:s,avatar:r}=e;this._userNameElement.textContent=t,this._userDescriptionElement.textContent=s,r&&(this._userAvatarElement.src=r),this._userAvatarElement.onload=()=>{this._userAvatarElement.classList.add("loaded")}}}({userNameSelector:".profile__title",userDescriptionSelector:".profile__description",userAvatarSelector:".profile__avatar"});u.getUserInfo().then((e=>{_.setUserInfo({userName:e.name,userDescription:e.about,avatar:e.avatar})})).catch((e=>console.error("Error fetching user info:",e)));const m=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.prepend(e):this._container.append(e)}renderItems(e){e.forEach(this._renderer)}}({items:[],renderer:e=>{const t=c(e);m.addItem(t)}},".cards__list");u.getInitialCards().then((e=>{m.renderItems(e)})).catch((e=>console.error("Error fetching cards:",e)));const p=new s(e,a.getForm()),E=new s(e,l.getForm()),v=new s(e,o.getForm());p.enableValidation(),E.enableValidation(),v.enableValidation(),t.editProfileButton.addEventListener("click",(()=>{const{userName:e,userDescription:t}=_.getUserInfo();a.setInputValues({userName:e,userDescription:t}),p.resetValidation(),a.open()})),t.addCardButton.addEventListener("click",(()=>{E.resetValidation(),l.open()})),t.editAvatarButton.addEventListener("click",(()=>{v.resetValidation(),o.open()})),d.setEventListeners(),a.setEventListeners(),o.setEventListeners(),l.setEventListeners(),h.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,